package simpledb;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class HashEquiJoin extends Operator {

    private static final long serialVersionUID = 1L;

    private JoinPredicate _predicate;
    private DbIterator _child1;
    private DbIterator _child2;

    /**
     * Constructor. Accepts to children to join and the predicate to join them
     * on
     * 
     * @param p
     *            The predicate to use to join the children
     * @param child1
     *            Iterator for the left(outer) relation to join
     * @param child2
     *            Iterator for the right(inner) relation to join
     */
    public HashEquiJoin(JoinPredicate p, DbIterator child1, DbIterator child2) {
        // some code goes here
        this._predicate = p;
        this._child1 = child1;
        this._child2 = child2;
    }

    public JoinPredicate getJoinPredicate() {
        // some code goes here
        return _predicate;
    }

    public TupleDesc getTupleDesc() {
        // some code goes here
        return TupleDesc.merge(_child1.getTupleDesc(), _child2.getTupleDesc());
    }
    
    public String getJoinField1Name() {
        // some code goes here
        TupleDesc td1 = _child1.getTupleDesc();
        int field1 = _predicate.getField1();
        // TODO: How to get TableName and TableAlias???
        return td1.getFieldName(field1);
    }

    public String getJoinField2Name() {
        // some code goes here
        TupleDesc td2 = _child1.getTupleDesc();
        int field2 = _predicate.getField2();
        // TODO: How to get TableName and TableAlias???
        return td2.getFieldName(field2);
    }
    
    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        // some code goes here
        _child1.open();
        _child2.open();
        super.open();
    }

    public void close() {
        // some code goes here
        super.close();
        _child1.close();
        _child2.close();
    }

    public void rewind() throws DbException, TransactionAbortedException {
        // some code goes here
        _child1.rewind();
        _child2.rewind();
    }

    // For Hash-join alg. building phase
    transient HashMap<Integer, List<Tuple>> _buildTable = new HashMap<>();
    transient Iterator<Tuple> listIt = null;
    transient Tuple curProbe = null;

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, there will be two copies of the join attribute in
     * the results. (Removing such duplicate columns can be done with an
     * additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     * 
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        // some code goes here

        // Build phase
        if (_buildTable.isEmpty()) {
            while (_child1.hasNext()) {
//                Debug.log("In child1 loop");
                Tuple t1 = _child1.next();
                int bucketNum = t1.getField(_predicate.getField1()).hashCode() % 8192;
                if (!_buildTable.containsKey(bucketNum)) {
                    ArrayList<Tuple> toAdd = new ArrayList<>();
                    toAdd.add(t1);
                    _buildTable.put(bucketNum, toAdd);
                } else {
                    _buildTable.get(bucketNum).add(t1);
                }
            }
        }

        // Probe phase
        while ((listIt != null && listIt.hasNext()) || _child2.hasNext()) {
            if (listIt == null || !(listIt.hasNext())) {
                curProbe = _child2.next();
                int bucketNum = curProbe.getField(_predicate.getField2()).hashCode() % 8192;
                if (_buildTable.containsKey(bucketNum)) {
                    listIt = _buildTable.get(bucketNum).iterator();
                } else {
                    continue;
                }
            }

            while (listIt.hasNext()) {
                Tuple t1 = listIt.next();

//                Debug.log("t1:%s | t2:%s | Predicate: %s | %b", t1.toString(), curProbe.toString(),
//                        _predicate.toString(), _predicate.filter(t1, curProbe));
                if (_predicate.filter(t1, curProbe)) {
                    // Create new merged tuple
                    TupleDesc joined_td = getTupleDesc();
                    int numFields1 = t1.getTupleDesc().numFields();
                    int numFields2 = curProbe.getTupleDesc().numFields();

                    Tuple newTuple = new Tuple(joined_td);
                    newTuple.setRecordId(t1.getRecordId());

                    for (int i = 0; i < numFields1; i++) {
                        newTuple.setField(i, t1.getField(i));
                    }
                    for (int i = 0; i < numFields2; i++) {
                        newTuple.setField(i + numFields1, curProbe.getField(i));
                    }
//                    Debug.log("NewTuple: %s", newTuple.toString());
                    return newTuple;
                }
            }
        }

        return null;
    }

    @Override
    public DbIterator[] getChildren() {
        // some code goes here
        return null;
    }

    @Override
    public void setChildren(DbIterator[] children) {
        // some code goes here
    }
    
}
